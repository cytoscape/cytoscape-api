package org.cytoscape.view.presentation;

import java.awt.Image;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.cytoscape.view.model.CyNetworkView;
import org.cytoscape.view.model.CyNetworkViewFactory;
import org.cytoscape.view.presentation.annotations.Annotation;



/**
 * <p>
 * This service is used to create images for a given {@link CyNetworkView}.
 * </p>
 * <p>
 * This service can be used to create thumbnail images of a network without
 * the need to create a {@link RenderingEngine} or Swing components. 
 * The images are generated by Cytoscape's default 2D renderer with 
 * the default set of VisualProperties and a high level of detail.
 * </p>
 * <p>
 * Note: Nested networks are not supported in the generated images.
 * </p>
 * 
 * @since 3.9
 * 
 * @CyAPI.Api.Interface
 * @CyAPI.InModule presentation-api
 */
public interface NetworkImageFactory {
	
	/**
	 * The height of the image, default: 100
	 */
	public static final String HEIGHT = "height";
	
	/**
	 * The width of the returned image, default: 100
	 */
	public static final String WIDTH = "width";
	
	/**
	 * <p> If true the network will be automatically centered and scaled to fit inside the image bounds.</p>
	 * <p> If false then the network Visual Properties NETWORK_SCALE_FACTOR, 
	 * NETWORK_CENTER_X_LOCATION, NETWORK_CENTER_Y_LOCATION will be used to position and scale
	 * the image. The origin for the image coordinates is at the center of the image.</p>
	 * Default: true.
	 */
	public static final String FIT_CONTENT = "fitContent";
	
	
	/**
	 * Creates a network image thumbnail with the given properties.
	 * <br><br>
	 * Example:
	 * <pre>
	 * Map&lt;String,Object> properties = new HashMap&lt;>();
	 * properties.put(WIDTH,  width);
	 * properties.put(HEIGHT, height);
	 * properties.put(FIT_CONTENT, true);
	 * Image image = thumbnailFactory.createThumbnail(networkView, null, properties);
	 * </pre>
	 * 
	 * @param networkView A {@link CyNetworkView} that was created from Cytoscape's default {@link CyNetworkViewFactory}.
	 * @param annotations A list of Annotations that will be included in the image. May be null.
	 * @param properties A Map of key-value pairs where the keys are constants in this interface. May be null.
	 * 
	 * @throws NullPointerException If networkView is null.
	 * @throws IllegalArgumentException If the given networkView was not created by Cytoscape's default {@link CyNetworkViewFactory}.
	 * 
	 */
	Image createImage(CyNetworkView networkView, Collection<Annotation> annotations, Map<String,Object> properties);
	
	
	/**
	 * Creates a network image thumbnail with the given width and height. The network will
	 * be centered and scaled to fit within the image bounds.
	 * <br><br>
	 * Equivalent to:
	 * <pre>
	 * Map&lt;String,Object> properties = new HashMap&lt;>();
	 * properties.put(WIDTH,  width);
	 * properties.put(HEIGHT, height);
	 * properties.put(FIT_CONTENT, true);
	 * Image image = thumbnailFactory.createThumbnail(networkView, null, properties);
	 * </pre>
	 */
	default Image createImage(CyNetworkView networkView, int width, int height) {
		Map<String,Object> properties = new HashMap<>();
		properties.put(WIDTH,  width);
		properties.put(HEIGHT, height);
		properties.put(FIT_CONTENT, true);
		return createImage(networkView, null, properties);
	}

}
